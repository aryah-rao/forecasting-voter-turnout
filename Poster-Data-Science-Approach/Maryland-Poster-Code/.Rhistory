# Read CSV file
prim <- read.csv("20160301__ar__primary__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes')
gen <- read.csv("20161108__ar__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes')
View(gen)
# Load libraries
library(tidyverse)   # For data manipulation and visualization
library(ggplot2)     # For visualization
library(dplyr)       # Data manipulation
library(readr)       # Read CSV files
library(ggpmisc)
# Read CSV file
prim <- read.csv("20160301__ar__primary__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'U.S. President & Vice President')
gen <- read.csv("20161108__ar__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'U.S. President & Vice President')
View(gen)
View(prim)
# Load libraries
library(tidyverse)   # For data manipulation and visualization
library(ggplot2)     # For visualization
library(dplyr)       # Data manipulation
library(readr)       # Read CSV files
library(ggpmisc)
# Read CSV file
prim <- read.csv("20160301__ar__primary__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes')
gen <- read.csv("20161108__ar__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'U.S. President & Vice President')
View(prim)
# Load libraries
library(tidyverse)   # For data manipulation and visualization
library(ggplot2)     # For visualization
library(dplyr)       # Data manipulation
library(readr)       # Read CSV files
library(ggpmisc)
# Read CSV file
prim <- read.csv("20160301__ar__primary__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes') %>% filter (office == 'U.S. President - DEM' | office == 'U.S. President - REP')
gen <- read.csv("20161108__ar__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'U.S. President & Vice President')
# Load libraries
library(tidyverse)   # For data manipulation and visualization
library(ggplot2)     # For visualization
library(dplyr)       # Data manipulation
library(readr)       # Read CSV files
library(ggpmisc)
# Read CSV file
prim <- read.csv("20160301__ar__primary__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes') %>% filter (office == 'U.S. President - DEM' | office == 'U.S. President - REP')
gen <- read.csv("20161108__ar__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'U.S. President & Vice President')
# Count number of distinct precincts of AR
distinct_precinct_gen <- gen %>% distinct(precinct) %>% count()
# Print the result
print(distinct_precinct_gen)
# Count number of distinct precincts of WA
distinct_precinct_prim <- prim %>% distinct(precinct) %>% count()
# Print the result
print(distinct_precinct_prim)
# Print the distinct names
unique(prim$candidate)
# Print the distinct names
# unique(prim$candidate)
unique(gen$candidate)
# Calculate total votes per precinct
totalvote_per_precinct_prim <- prim %>%
group_by(precinct) %>%
summarise(total_votes = sum(votes, na.rm = TRUE))
summary(totalvote_per_precinct_prim$total_votes)
# Calculate total votes per precinct
total_per_precinct_prim <- prim %>%
group_by(Precinct) %>%
summarise(total_votes = sum(Votes, na.rm = TRUE), .groups = "drop")
# Calculate total votes per precinct
total_per_precinct_prim <- prim %>%
group_by(precinct) %>%
summarise(total_votes = sum(Votes, na.rm = TRUE), .groups = "drop")
# Calculate total votes per precinct
total_per_precinct_prim <- prim %>%
group_by(precinct) %>%
summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Plot histogram of voter turnout per precinct
ggplot(total_per_precinct_prim, aes(x = total_votes)) +
geom_histogram(binwidth = 80, fill = "pink", color = "navy") +
labs(title = "Total Vote Distribution by Precinct Maryland Primary",
x = "Total Votes per Precinct",
y = "Number of Precincts") +
theme_minimal()
# Calculate total votes per precinct
total_per_precinct_prim <- prim %>%
group_by(precinct) %>%
summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Plot histogram of voter turnout per precinct
ggplot(total_per_precinct_prim, aes(x = total_votes)) +
geom_histogram(binwidth = 80, fill = "pink", color = "navy") +
labs(title = "Total Vote Distribution by Precinct AR Primary",
x = "Total Votes per Precinct",
y = "Number of Precincts") +
theme_minimal()
# Calculate total votes per precinct
total_per_precinct_gen <- gen %>%
group_by(Precinct) %>%
summarise(total_votes = sum(Votes, na.rm = TRUE), .groups = "drop")
# Compute state-wide vote share for each party
state_party_lean <- gen %>%
group_by(Party) %>%
summarise(
total_votes = sum(Votes, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(vote_share = total_votes / sum(total_votes))  # Normalize vote share
# Compute state-wide vote share for each party
state_party_lean <- gen %>%
group_by(party) %>%
summarise(
total_votes = sum(votes, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(vote_share = total_votes / sum(total_votes))  # Normalize vote share
# View sorted results (Highest vote share first)
state_party_lean <- state_party_lean %>%
arrange(desc(vote_share))  # Sort by highest vote share
# View top party
head(state_party_lean, 2)  # Show top 2 parties
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
filter(Party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(Precinct, Party) %>%
summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize general election data (only REP and DEM)
general_votes <- gen %>%
filter(Party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(Precinct, Party) %>%
summarise(general_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize general election data (only REP and DEM)
general_votes <- gen %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(general_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Merge REP & DEM votes into election data
election_data <- left_join(primary_votes, general_votes, by = c("precinct", "party"))
election_data <- election_data %>%
left_join(total_per_precinct_prim, by = c("precinct")) %>%
left_join(total_per_precinct_gen, by = c("precinct"))
# Calculate total votes per precinct
total_per_precinct_gen <- gen %>%
group_by(precinct) %>%
summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Plot histogram of voter turnout per precinct
ggplot(total_per_precinct_gen, aes(x = total_votes)) +
geom_histogram(binwidth = 80, fill = "pink", color = "navy") +
labs(title = "Total Vote Distribution by Precinct Maryland General",
x = "Total Votes per Precinct",
y = "Number of Precincts") +
theme_minimal()
# Compute state-wide vote share for each party
state_party_lean <- gen %>%
group_by(party) %>%
summarise(
total_votes = sum(votes, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(vote_share = total_votes / sum(total_votes))  # Normalize vote share
# View sorted results (Highest vote share first)
state_party_lean <- state_party_lean %>%
arrange(desc(vote_share))  # Sort by highest vote share
# View top party
head(state_party_lean, 2)  # Show top 2 parties
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize general election data (only REP and DEM)
general_votes <- gen %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(general_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Merge REP & DEM votes into election data
election_data <- left_join(primary_votes, general_votes, by = c("precinct", "party"))
election_data <- election_data %>%
left_join(total_per_precinct_prim, by = c("precinct")) %>%
left_join(total_per_precinct_gen, by = c("precinct"))
election_data <- election_data %>%
rename(
total_prim = total_votes.x,
total_gen = total_votes.y
)
# View updated dataset
head(election_data)
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Summarize general election data (only REP and DEM)
general_votes <- gen %>%
filter(party %in% c("REP", "DEM")) %>%  # Keep only REP and DEM
group_by(precinct, party) %>%
summarise(general_votes = sum(votes, na.rm = TRUE), .groups = "drop")
# Merge REP & DEM votes into election data
election_data <- left_join(primary_votes, general_votes, by = c("precinct", "party"))
election_data <- election_data %>%
left_join(total_per_precinct_prim, by = c("precinct")) %>%
left_join(total_per_precinct_gen, by = c("precinct"))
election_data <- election_data %>%
rename(
total_prim = total_votes.x,
total_gen = total_votes.y
)
# View updated dataset
head(election_data)
View(election_data)
election_data <- election_data %>%
mutate(
primary_share = primary_votes / total_prim,  # REP/DEM primary vote share
general_share = general_votes / total_gen   # REP/DEM general vote share
)
# Define scales for the color gradient
scales <- c(0, 2000, 2001, max(election_data$total_prim))
# Plotting the data
ggplot(election_data %>% filter(Party == "REP"),
aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
geom_point(shape = 21, fill = NA, alpha = 0.7, size = 1.2, stroke = 0.8) +  # Hollow circles
geom_abline(slope = 1, intercept = 0, color = "red", linewidth = 1.2) +
scale_color_gradientn(
colors = c("orange", "orange", "blue", "blue"),  # Custom color gradient
values = scales::rescale(scales)  # Map colors to quartiles
) +  # Custom gradient
labs(
title = "Null model:
How Well Do Republican Primary Vote Shares
Predict General Election Vote Shares?",
x = "Primary REP Vote Share",
y = "General REP Vote Share",
color = "Primary Turnout (Votes)"
) +
theme_minimal()
# Define scales for the color gradient
scales <- c(0, 1000, 2000, 2001, max(election_data$total_prim))
# Plotting the data
ggplot(election_data %>% filter(Party == "DEM"),
aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
geom_point(aes(shape = "precinct data"), fill = NA, alpha = 0.7, size = 1.5, stroke = 0.8) +  # Map shape to a constant
geom_abline(aes(linetype = "null model"), slope = 1, intercept = 0, color = "blue", linewidth = 1.2) +  # Map linetype to a constant
scale_color_gradientn(
colors = c("gold", "green","darkgreen", "red","red"),  # Improved smooth color gradient
values = scales::rescale(scales)  # Map colors to quartiles
) +  # Custom gradient
scale_shape_manual(
name   = "",
values = c("precinct data" = 21)  # Map "precinct data" to shape 21
) +
scale_linetype_manual(
name   = "",
values = c("null model" = 1)  # Map "null model" to linetype 1
) +
labs(
x = "Primary DEM Vote Share",
y = "General DEM Vote Share",
color = "Primary Turnout (Votes)"
) +
annotate("text", x = 0.75, y = 0.25, label = "Underperform", color = "gray50") +  # Adjusted annotation position
annotate("text", x = 0.25, y = 0.75, label = "Overperform", color = "gray50") +  # Adjusted annotation position
theme_minimal()
# Define scales for the color gradient
scales <- c(0, 1000, 2000, 2001, max(election_data$total_prim))
# Plotting the data
ggplot(election_data %>% filter(party == "DEM"),
aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
geom_point(aes(shape = "precinct data"), fill = NA, alpha = 0.7, size = 1.5, stroke = 0.8) +  # Map shape to a constant
geom_abline(aes(linetype = "null model"), slope = 1, intercept = 0, color = "blue", linewidth = 1.2) +  # Map linetype to a constant
scale_color_gradientn(
colors = c("gold", "green","darkgreen", "red","red"),  # Improved smooth color gradient
values = scales::rescale(scales)  # Map colors to quartiles
) +  # Custom gradient
scale_shape_manual(
name   = "",
values = c("precinct data" = 21)  # Map "precinct data" to shape 21
) +
scale_linetype_manual(
name   = "",
values = c("null model" = 1)  # Map "null model" to linetype 1
) +
labs(
x = "Primary DEM Vote Share",
y = "General DEM Vote Share",
color = "Primary Turnout (Votes)"
) +
annotate("text", x = 0.75, y = 0.25, label = "Underperform", color = "gray50") +  # Adjusted annotation position
annotate("text", x = 0.25, y = 0.75, label = "Overperform", color = "gray50") +  # Adjusted annotation position
theme_minimal()
# Define scales for the color gradient
scales <- c(0, 1000, 2000, 2001, max(election_data$total_prim))
# Plotting the data
ggplot(election_data %>% filter(party == "REP"),
aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
geom_point(aes(shape = "precinct data"), fill = NA, alpha = 0.7, size = 1.5, stroke = 0.8) +  # Map shape to a constant
geom_abline(aes(linetype = "null model"), slope = 1, intercept = 0, color = "blue", linewidth = 1.2) +  # Map linetype to a constant
scale_color_gradientn(
colors = c("gold", "green","darkgreen", "red","red"),  # Improved smooth color gradient
values = scales::rescale(scales)  # Map colors to quartiles
) +  # Custom gradient
scale_shape_manual(
name   = "",
values = c("precinct data" = 21)  # Map "precinct data" to shape 21
) +
scale_linetype_manual(
name   = "",
values = c("null model" = 1)  # Map "null model" to linetype 1
) +
labs(
x = "Primary DEM Vote Share",
y = "General DEM Vote Share",
color = "Primary Turnout (Votes)"
) +
annotate("text", x = 0.75, y = 0.25, label = "Underperform", color = "gray50") +  # Adjusted annotation position
annotate("text", x = 0.25, y = 0.75, label = "Overperform", color = "gray50") +  # Adjusted annotation position
theme_minimal()
# Define scales for the color gradient
scales <- c(0, 1000, 2000, 2001, max(election_data$total_prim))
# Plotting the data
ggplot(election_data %>% filter(party == "REP"),
aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
geom_point(aes(shape = "precinct data"), fill = NA, alpha = 0.7, size = 1.5, stroke = 0.8) +  # Map shape to a constant
geom_abline(aes(linetype = "null model"), slope = 1, intercept = 0, color = "blue", linewidth = 1.2) +  # Map linetype to a constant
scale_color_gradientn(
colors = c("gold", "green","darkgreen", "red","red"),  # Improved smooth color gradient
values = scales::rescale(scales)  # Map colors to quartiles
) +  # Custom gradient
scale_shape_manual(
name   = "",
values = c("precinct data" = 21)  # Map "precinct data" to shape 21
) +
scale_linetype_manual(
name   = "",
values = c("null model" = 1)  # Map "null model" to linetype 1
) +
labs(
x = "Primary DEM Vote Share",
y = "General DEM Vote Share",
color = "Primary Turnout (Votes)"
) +
annotate("text", x = 0.75, y = 0.25, label = "Underperform", color = "gray50") +  # Adjusted annotation position
annotate("text", x = 0.25, y = 0.75, label = "Overperform", color = "gray50") +  # Adjusted annotation position
theme_minimal()
# Calculate the weighted average difference
weighted_avg_diff <- election_data %>%
filter(Party == "REP") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_prim * diff_from_expected, na.rm = TRUE) / sum(total_prim, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Calculate the weighted average difference
weighted_avg_diff <- election_data %>%
filter(party == "REP") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_prim * diff_from_expected, na.rm = TRUE) / sum(total_prim, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Print the result
print(paste("Weighted average difference:", weighted_avg_diff))
# Check NA
alr_drop_na <- election_data %>%
filter(Party == "REP") %>%
select(total_prim, general_share, primary_share) %>%
drop_na()  # This removes any rows with NA values in these columns
# Calculate the weighted average difference
weighted_avg_diff <- election_data %>%
filter(party == "REP") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_prim * diff_from_expected, na.rm = TRUE) / sum(total_prim, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Print the result
print(paste("Weighted average difference:", weighted_avg_diff))
# Check NA
alr_drop_na <- election_data %>%
filter(party == "REP") %>%
select(total_prim, general_share, primary_share) %>%
drop_na()  # This removes any rows with NA values in these columns
# Recheck
# Method 2: Using weighted.mean() function
alt_calculation <- with(
election_data %>% filter(party == "REP"),
weighted.mean(general_share - primary_share, total_prim, na.rm = TRUE)
)
# Method 3: Group by calculation steps
step_by_step <- election_data %>%
filter(Party == "REP") %>%
mutate(diff = general_share - primary_share,
weighted_diff = diff * total_prim) %>%
summarize(
sum_weighted_diffs = sum(weighted_diff, na.rm = TRUE),
sum_weights = sum(total_prim, na.rm = TRUE),
weighted_avg = sum_weighted_diffs / sum_weights
)
# Recheck
# Method 2: Using weighted.mean() function
alt_calculation <- with(
election_data %>% filter(party == "REP"),
weighted.mean(general_share - primary_share, total_prim, na.rm = TRUE)
)
# Method 3: Group by calculation steps
step_by_step <- election_data %>%
filter(party == "REP") %>%
mutate(diff = general_share - primary_share,
weighted_diff = diff * total_prim) %>%
summarize(
sum_weighted_diffs = sum(weighted_diff, na.rm = TRUE),
sum_weights = sum(total_prim, na.rm = TRUE),
weighted_avg = sum_weighted_diffs / sum_weights
)
# Compare results
print(paste("Original calculation:", weighted_avg_diff))
print(paste("Alternative calculation:", alt_calculation))
print(step_by_step)
df_check <- election_data %>% filter(party == "REP") %>% filter(primary_share == 1 & general_share < 1)
df_check
# Calculate the weighted average difference using general election turnout
weighted_avg_diff_gen <- election_data %>%
filter(Party == "DEM") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_gen * diff_from_expected, na.rm = TRUE) / sum(total_gen, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Calculate the weighted average difference using general election turnout
weighted_avg_diff_gen <- election_data %>%
filter(party == "DEM") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_gen * diff_from_expected, na.rm = TRUE) / sum(total_gen, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Print the result
print(paste("Weighted average difference (weighted by general turnout):", weighted_avg_diff_gen))
# Recheck with alternative methods
# Method 2: Using weighted.mean() function
alt_calculation_gen <- with(
election_data %>% filter(Party == "REP"),
weighted.mean(general_share - primary_share, total_gen, na.rm = TRUE)
)
# Calculate the weighted average difference using general election turnout
weighted_avg_diff_gen <- election_data %>%
filter(party == "DEM") %>%
mutate(
# Calculate difference from y=x line (general_share - primary_share)
diff_from_expected = general_share - primary_share
) %>%
summarize(
# Sum of (weight * difference) divided by sum of weights
weighted_avg = sum(total_gen * diff_from_expected, na.rm = TRUE) / sum(total_gen, na.rm = TRUE)
) %>%
pull(weighted_avg)
# Print the result
print(paste("Weighted average difference (weighted by general turnout):", weighted_avg_diff_gen))
# Recheck with alternative methods
# Method 2: Using weighted.mean() function
alt_calculation_gen <- with(
election_data %>% filter(party == "REP"),
weighted.mean(general_share - primary_share, total_gen, na.rm = TRUE)
)
# Method 3: Group by calculation steps
step_by_step_gen <- election_data %>%
filter(party == "REP") %>%
mutate(diff = general_share - primary_share,
weighted_diff = diff * total_gen) %>%
summarize(
sum_weighted_diffs = sum(weighted_diff, na.rm = TRUE),
sum_weights = sum(total_gen, na.rm = TRUE),
weighted_avg = sum_weighted_diffs / sum_weights
)
# Compare results
print(paste("Original calculation (general turnout):", weighted_avg_diff_gen))
print(paste("Alternative calculation (general turnout):", alt_calculation_gen))
print(step_by_step_gen)
