---
title: "Data Exploration with 2016 Tennessee Primary and General Data"
authors: "Jenny Nguyen"
toc: true
toc-depth: 3
toc-title: Table of Contents
date: April 22, 2025
format: html
editor: visual
self-contained: true
warning: false
code-fold: false
---

```{r}
# Load libraries
library(tidyverse)   # For data manipulation and visualization
library(ggplot2)     # For visualization
library(dplyr)       # Data manipulation
library(readr)       # Read CSV files
library(ggpmisc)


# Read CSV file
prim <- read.csv("20160301__tn__primary__president__precinct.csv")
prim <- prim %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes') 
gen <- read.csv("20161108__tn__general__precinct.csv")
gen <- gen %>% filter(candidate != 'Write-In' & candidate != 'Registered Voters' & candidate != 'Yes' & office == 'President')
```

```{r}
# Count number of distinct precincts of TN
distinct_precinct_gen <- gen %>% distinct(precinct) %>% count()

# Print the result
print(distinct_precinct_gen)

```

```{r}
# Count number of distinct precincts of WA
distinct_precinct_prim <- prim %>% distinct(precinct) %>% count()

# Print the result
print(distinct_precinct_prim)
```

```{r}
# Print the distinct names
# unique(prim$candidate)
# unique(gen$candidate)
```

```{r}
# Calculate total votes per precinct
totalvote_per_precinct_prim <- prim %>%
  group_by(precinct) %>%
  summarise(total_votes = sum(votes, na.rm = TRUE))
summary(totalvote_per_precinct_prim$total_votes)
```

```{r}
# Calculate total votes per precinct
total_per_precinct_prim <- prim %>%
  group_by(precinct) %>%
  summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop")  

# Plot histogram of voter turnout per precinct
ggplot(total_per_precinct_prim, aes(x = total_votes)) +
  geom_histogram(binwidth = 80, fill = "pink", color = "navy") +
  labs(title = "Total Vote Distribution by Precinct TN Primary",
       x = "Total Votes per Precinct",
       y = "Number of Precincts") +
  theme_minimal()
```

```{r}
# Calculate total votes per precinct
total_per_precinct_gen <- gen %>%
  group_by(precinct) %>%
  summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop")  

# Plot histogram of voter turnout per precinct
ggplot(total_per_precinct_gen, aes(x = total_votes)) +
  geom_histogram(binwidth = 80, fill = "pink", color = "navy") +
  labs(title = "Total Vote Distribution by Precinct TN General",
       x = "Total Votes per Precinct",
       y = "Number of Precincts") +
  theme_minimal()
```

```{r}
# Compute state-wide vote share for each party
state_party_lean <- gen %>%
  group_by(party) %>%
  summarise(
    total_votes = sum(votes, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(vote_share = total_votes / sum(total_votes))  # Normalize vote share

# View sorted results (Highest vote share first)
state_party_lean <- state_party_lean %>%
  arrange(desc(vote_share))  # Sort by highest vote share

# View top party
head(state_party_lean, 2)  # Show top 2 parties
```

```{r}
# Summarize primary election data (only REP and DEM)
primary_votes <- prim %>%
  filter(party %in% c("Republican", "Democratic")) %>%  # Keep only REP and DEM
  group_by(precinct, party) %>%
  summarise(primary_votes = sum(votes, na.rm = TRUE), .groups = "drop")

# Summarize general election data (only REP and DEM)
general_votes <- gen %>%
  filter(party %in% c("Republican", "Democratic")) %>%  # Keep only REP and DEM
  group_by(precinct, party) %>%
  summarise(general_votes = sum(votes, na.rm = TRUE), .groups = "drop")

# Merge REP & DEM votes into election data
election_data <- left_join(primary_votes, general_votes, by = c("precinct", "party"))

election_data <- election_data %>%
  left_join(total_per_precinct_prim, by = c("precinct")) %>% 
  left_join(total_per_precinct_gen, by = c("precinct"))

election_data <- election_data %>%
  rename(
    total_prim = total_votes.x,
    total_gen = total_votes.y
  )

# View updated dataset
head(election_data)
```

```{r}
election_data <- election_data %>%
  mutate(
    primary_share = primary_votes / total_prim,  # REP/DEM primary vote share
    general_share = general_votes / total_gen   # REP/DEM general vote share
  )
```

```{r}
# Define scales for the color gradient
scales <- c(0, 1000, 2000, 2001, max(election_data$total_prim))

# Plotting the data
ggplot(election_data %>% filter(party == "Republican"), 
       aes(x = primary_share, y = general_share, color = total_prim)) +  # Use total_prim for turnout
  geom_point(aes(shape = "precinct data"), fill = NA, alpha = 0.7, size = 1.5, stroke = 0.8) +  # Map shape to a constant
  geom_abline(aes(linetype = "null model"), slope = 1, intercept = 0, color = "blue", linewidth = 1.2) +  # Map linetype to a constant
  scale_color_gradientn(
    colors = c("gold", "green","darkgreen", "red","red"),  # Improved smooth color gradient
    values = scales::rescale(scales)  # Map colors to quartiles
  ) +  # Custom gradient
  scale_shape_manual(
    name   = "",
    values = c("precinct data" = 21)  # Map "precinct data" to shape 21
  ) +
  scale_linetype_manual(
    name   = "",
    values = c("null model" = 1)  # Map "null model" to linetype 1
  ) +
  labs(
    x = "Primary REP Vote Share",
    y = "General REP Vote Share",
    color = "Primary Turnout (Votes)"
  ) +
  annotate("text", x = 0.75, y = 0.25, label = "Underperform", color = "gray50") +  # Adjusted annotation position
  annotate("text", x = 0.25, y = 0.75, label = "Overperform", color = "gray50") +  # Adjusted annotation position
  theme_minimal()
```

```{r}
# Calculate the weighted average difference
weighted_avg_diff <- election_data %>% 
  filter(party == "Republican") %>%
  mutate(
    # Calculate difference from y=x line (general_share - primary_share)
    diff_from_expected = general_share - primary_share
  ) %>%
  summarize(
    # Sum of (weight * difference) divided by sum of weights
    weighted_avg = sum(total_prim * diff_from_expected, na.rm = TRUE) / sum(total_prim, na.rm = TRUE)
  ) %>%
  pull(weighted_avg)

# Print the result
print(paste("Weighted average difference:", weighted_avg_diff))

# Check NA
alr_drop_na <- election_data %>% 
  filter(party == "Republican") %>% 
  select(total_prim, general_share, primary_share) %>%
  drop_na()  # This removes any rows with NA values in these columns
```

```{r}
# Recheck
# Method 2: Using weighted.mean() function
alt_calculation <- with(
  election_data %>% filter(party == "Republican"),
  weighted.mean(general_share - primary_share, total_prim, na.rm = TRUE)
)

# Method 3: Group by calculation steps
step_by_step <- election_data %>% 
  filter(party == "Republican") %>%
  mutate(diff = general_share - primary_share,
         weighted_diff = diff * total_prim) %>%
  summarize(
    sum_weighted_diffs = sum(weighted_diff, na.rm = TRUE),
    sum_weights = sum(total_prim, na.rm = TRUE),
    weighted_avg = sum_weighted_diffs / sum_weights
  )

# Compare results
print(paste("Original calculation:", weighted_avg_diff))
print(paste("Alternative calculation:", alt_calculation))
print(step_by_step)
```

```{r}
df_check <- election_data %>% filter(party == "Republican") %>% filter(primary_share == 1 & general_share < 1)
df_check
```

```{r}
# Calculate the weighted average difference using general election turnout
weighted_avg_diff_gen <- election_data %>% 
  filter(party == "Republican") %>%
  mutate(
    # Calculate difference from y=x line (general_share - primary_share)
    diff_from_expected = general_share - primary_share
  ) %>%
  summarize(
    # Sum of (weight * difference) divided by sum of weights
    weighted_avg = sum(total_gen * diff_from_expected, na.rm = TRUE) / sum(total_gen, na.rm = TRUE)
  ) %>%
  pull(weighted_avg)

# Print the result
print(paste("Weighted average difference (weighted by general turnout):", weighted_avg_diff_gen))

# Recheck with alternative methods
# Method 2: Using weighted.mean() function
alt_calculation_gen <- with(
  election_data %>% filter(party == "Republican"),
  weighted.mean(general_share - primary_share, total_gen, na.rm = TRUE)
)

# Method 3: Group by calculation steps
step_by_step_gen <- election_data %>% 
  filter(party == "Republican") %>%
  mutate(diff = general_share - primary_share,
         weighted_diff = diff * total_gen) %>%
  summarize(
    sum_weighted_diffs = sum(weighted_diff, na.rm = TRUE),
    sum_weights = sum(total_gen, na.rm = TRUE),
    weighted_avg = sum_weighted_diffs / sum_weights
  )

# Compare results
print(paste("Original calculation (general turnout):", weighted_avg_diff_gen))
print(paste("Alternative calculation (general turnout):", alt_calculation_gen))
print(step_by_step_gen)
```

```{r}
# Calculate the unweighted average difference
unweighted_avg_diff <- election_data %>% 
  filter(party == "Republican") %>%
  mutate(
    # Calculate difference from y=x line (general_share - primary_share)
    diff_from_expected = general_share - primary_share
  ) %>%
  summarize(
    # Simple average of all differences
    unweighted_avg = mean(diff_from_expected, na.rm = TRUE)
  ) %>%
  pull(unweighted_avg)

# Print the result
print(paste("Unweighted average difference:", unweighted_avg_diff))

# Alternative calculation using mean() directly
alt_unweighted <- with(
  election_data %>% filter(party == "Republican"),
  mean(general_share - primary_share, na.rm = TRUE)
)

print(paste("Alternative unweighted calculation:", alt_unweighted))
```

```{r}
# Compute total Republican primary votes per precinct
primary_REP_votes <- prim %>%
  filter(Party == "Republican") %>%
  group_by(Precinct) %>%
  summarise(primary_REP_votes = sum(Votes, na.rm = TRUE), .groups = "drop")

# Compute total Democratic primary votes per precinct
primary_DEM_votes <- prim %>%
  filter(Party == "Democratic") %>%
  group_by(Precinct) %>%
  summarise(primary_DEM_votes = sum(Votes, na.rm = TRUE), .groups = "drop")

election_data <- election_data %>%
  left_join(primary_REP_votes, by = "Precinct") %>%
  left_join(primary_DEM_votes, by = "Precinct")
```

```{r}
# Calculate general_REP_votes and share_diff
rep_data <- election_data %>%
  filter(Party == "Republican") %>%
  mutate(
    general_REP_votes = general_share * total_gen,  # Calculate general Republican votes
    share_diff = (general_REP_votes / total_gen) - (primary_REP_votes / total_prim)  # Calculate share difference
  )
```

```         
```

```{r}
election_data <- election_data %>%
  mutate(
    null_model_prediction = primary_share,  # Null model assumption
    REP_performance = general_share - null_model_prediction  # REP over/underperformance
  )
```

```{r}
election_data <- election_data %>% drop_na(REP_performance)
summary(election_data$REP_performance)
```

```{r}
ggplot(election_data, aes(x = primary_REP_votes, y = primary_DEM_votes)) +
  stat_summary_2d(
    aes(z = REP_performance),
    bins = 85,
    fun = mean
  ) +
  scale_fill_gradient2(
    low = "blue", 
    mid = "green", 
    high = "red", 
    midpoint = median(election_data$REP_performance, na.rm = TRUE),
    limits = c(
      quantile(election_data$REP_performance, 0.25, na.rm = TRUE), 
      quantile(election_data$REP_performance, 0.75, na.rm = TRUE)
    )
  ) +
  labs(
    title = "How Well Does Each Party’s Primary Turnout Predict General Election Results?",
    x = "Primary REP Vote Total",
    y = "Primary DEM Vote Total",
    fill = "REP Over/Underperformance"
  ) +
  theme_minimal()
```

```{r}
ggplot(election_data, aes(x = primary_votes, y = general_votes, color = general_share)) +
  geom_point(alpha = 0.2) +
  geom_smooth(method = "lm", color = "black") +  # Regression line
  scale_color_gradient(low = "blue", high = "red") +  # Color scale like reference
  labs(
    title = "How Well Does Turnout for a Party in the Primaries Predict Turnout in the General Election?",
    x = "Primary Vote Total",
    y = "General Vote Total",
    color = "REP General Vote Share"
  ) +
  theme_minimal()
```

```{r}
ggplot(election_data, aes(x = primary_votes, y = general_votes, color = Party)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE) +  
  stat_poly_eq(aes(label = after_stat(eq.label)), formula = y ~ x, parse = TRUE) +  # Equation
  scale_color_manual(values = c("Democratic" = "blue", "REP" = "red")) +  
  labs(
    title = "How Well Does Turnout for a Party in the Primaries Predict Turnout in the General Election?",
    x = "Primary Party Vote Total",
    y = "General Party Vote Total",
    color = "Party"
  ) +
  theme_minimal()

```
